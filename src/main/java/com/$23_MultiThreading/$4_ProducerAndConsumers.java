package com.$23_MultiThreading;

/*
    生产者和消费者(等待唤醒机制):
        是一个经典的多线程协作模式
        生产者: 生产数据
            类中定义生产者要执行的代码逻辑
        消费者: 消费数据
            类中定义消费者要执行的代码逻辑
        第三方: 控制生产者消费者是否等待和数据交换
            类中需要定义状态控制变量, 锁对象等数据, 生产者和消费者都通过锁对象与控制变量进行关联
            生产者和消费者中等待与唤醒方法都通过锁对象来进行调用, 可以绑定线程
        常见方法:
            void wait(): 当前线程等待, 直到被其他线程唤醒
            void notify(): 随机唤醒单个线程
            void notifyAll(): 唤醒所有线程
        阻塞队列方式实现等待唤醒机制:
            生产者阻塞: 队列中数据已放满, 无法再放入数据, 生产者一方会阻塞等待
            消费者阻塞: 队列为空, 无法再取出数据, 消费者一方会阻塞等待
            阻塞队列继承结构:
                实现接口: Iterable, Collection, Queue, BlockingQueue
                实现类:
                    ArrayBlockingQueue: 底层是数组, 有界(需要定义队列中可存放数据个数)
                    LikedBlockingQueue: 底层是链表, 无界(队列中可存放数据的个数为int的最大值)
                队列中放入数据: put()方法
                队列中取出数据: take()方法

 */
public class $4_ProducerAndConsumers {
}
