package com.$18_Gather;
/*
    数据结构:
        是计算机底层存储组织数据的方式
        一般情况下, 精心选择的数据结构可以带来更高的运行或者存储效率
        栈:
            特点: 后进先出, 先进后出(例如一个杯子, 子弹弹夹), 一端开口, 一端封闭
            压 / 进 栈: 数据存入栈中
            弹 / 出 栈: 数据从栈中离开
            栈内存就是栈的一种应用场景
        队列:
            特点: 先进先出, 后进后出; 一端开口==>后端, 一端开口==>前端
            入队列: 数据从后端进入队列
            出队列: 数据从前端离开队列
        数组:
            一种查询快, 增删慢的数据模型
            查询速度快: 数组在内存中是一片连续的空间, 查询数据通过索引值的地址值定位, 查询任意数据耗时相同
            删除效率低: 将原始数据删除后, 该数据后面每个数据都要前移
            添加效率极低: 添加数据位置后的每个数据后移, 然后再添加数据
        链表:
            每个元素为一个结点, 链表中的结点是独立的对象, 在内存中是不连续的, 首尾操作极快
            查询数据慢: 无论查询哪个数据都要从头开始查找
            增删相对快: 相对于数组增删较快
            单向链表: 节点中存储有数据值, 下一个结点地址值
            双向链表: 节点中存储有上一个结点地址值, 数据值, 下一个结点地址值
        二叉树:
            每个节点中存储有父节点地址值, 数据值, 左子节点地址值, 右子节点地址值四部分数据
            度: 指每一个节点的子节点数量
            树高: 树结构的层数
            根节点: 最顶层的节点
            根节点的左子树: 由根节点的左子节点向下延伸的部分
            根节点的右子树: 由根节点的右子节点向下延伸的部分
            二叉树: 任意节点的度 <= 2
            二叉树遍历方式:
                1. 前序遍历:
                    从根节点开始, 按照当前结点, 左子节点, 右子节点的顺序遍历
                2. 中序遍历:
                    从最左边的子节点开始, 按照左子节点, 当前结点, 右子节点的顺序遍历
                3. 后序遍历:
                    从最左边的子节点开始, 按照左子节点, 右子节点, 当前结点的顺序遍历
                4. 层序遍历:
                    从根节点开始一层一层遍历
        二叉查找树:
            目的:提高检索数据的性能, 又称二叉排序树或者二叉搜索树
            特点:
                1. 每一个节点上最多有两个子节点, 且左子节点的值小于该节点的值, 右子节点的值大于该节点的值
                2. 左子树上所有节点的值都小于根节点的值
                3. 右子树上所有节点的值都大于根节点的值
            添加节点特点: 小的存左边, 大的存右边, 一样的不存
        平衡二叉树:
            在满足查找二叉树的大小规则下, 让树尽可能矮小, 以此提高查询数据的性能
            要求:
                任意节点的左右两个子树高度差不超过1, 任意节点的左右两个子树都是一颗平衡二叉树
        红黑树:(根据红黑规则实现自平衡的二叉树)
            1. 每一个节点或是红色或是黑色, 根节点必须是黑色
            2. 如果一个节点没有子节点或者父节点, 则该节点相应的指针属性值为Nil, 这些Nil视为叶节点, 叶节点是黑色的
            3. 如果某一个节点是红色, 那么他的子节点必须是黑色(不能出现两个红色节点相连的情况)
            4. 对每一个节点, 从该节点到其后所有后代叶节点的简单路径上, 均包含相同数目的黑色节点
            添加节点的颜色可以是红色的, 也可以是黑色的, 默认使用红色节点效率高
            红黑树增删改查性能都很好
 */

public class $3_DataStructure {
}
